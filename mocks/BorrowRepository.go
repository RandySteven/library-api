// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/entity/models"
	query "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/query"
	mock "github.com/stretchr/testify/mock"
)

// BorrowRepository is an autogenerated mock type for the BorrowRepository type
type BorrowRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: whereClauses
func (_m *BorrowRepository) Find(whereClauses []query.WhereClause) ([]models.Borrow, error) {
	ret := _m.Called(whereClauses)

	var r0 []models.Borrow
	if rf, ok := ret.Get(0).(func([]query.WhereClause) []models.Borrow); ok {
		r0 = rf(whereClauses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Borrow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]query.WhereClause) error); ok {
		r1 = rf(whereClauses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnBookByBorrowId provides a mock function with given fields: id
func (_m *BorrowRepository) ReturnBookByBorrowId(id uint) (*models.Borrow, error) {
	ret := _m.Called(id)

	var r0 *models.Borrow
	if rf, ok := ret.Get(0).(func(uint) *models.Borrow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Borrow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: borrow
func (_m *BorrowRepository) Save(borrow *models.Borrow) (*models.Borrow, error) {
	ret := _m.Called(borrow)

	var r0 *models.Borrow
	if rf, ok := ret.Get(0).(func(*models.Borrow) *models.Borrow); ok {
		r0 = rf(borrow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Borrow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Borrow) error); ok {
		r1 = rf(borrow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBorrowRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBorrowRepository creates a new instance of BorrowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBorrowRepository(t mockConstructorTestingTNewBorrowRepository) *BorrowRepository {
	mock := &BorrowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
