// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/entity/models"

	query "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/query"
)

// BookUseCase is an autogenerated mock type for the BookUseCase type
type BookUseCase struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: ctx, book
func (_m *BookUseCase) CreateBook(ctx context.Context, book *models.Book) (*models.Book, error) {
	ret := _m.Called(ctx, book)

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(context.Context, *models.Book) *models.Book); ok {
		r0 = rf(ctx, book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBooks provides a mock function with given fields: ctx, whereClause
func (_m *BookUseCase) GetAllBooks(ctx context.Context, whereClause []query.WhereClause) ([]models.Book, error) {
	ret := _m.Called(ctx, whereClause)

	var r0 []models.Book
	if rf, ok := ret.Get(0).(func(context.Context, []query.WhereClause) []models.Book); ok {
		r0 = rf(ctx, whereClause)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []query.WhereClause) error); ok {
		r1 = rf(ctx, whereClause)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookUseCase creates a new instance of BookUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookUseCase(t mockConstructorTestingTNewBookUseCase) *BookUseCase {
	mock := &BookUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
