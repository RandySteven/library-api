// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/entity/models"
)

// AuthorUseCase is an autogenerated mock type for the AuthorUseCase type
type AuthorUseCase struct {
	mock.Mock
}

// CreateAuthor provides a mock function with given fields: ctx, author
func (_m *AuthorUseCase) CreateAuthor(ctx context.Context, author *models.Author) (*models.Author, error) {
	ret := _m.Called(ctx, author)

	var r0 *models.Author
	if rf, ok := ret.Get(0).(func(context.Context, *models.Author) *models.Author); ok {
		r0 = rf(ctx, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Author)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Author) error); ok {
		r1 = rf(ctx, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAuthors provides a mock function with given fields: ctx
func (_m *AuthorUseCase) GetAllAuthors(ctx context.Context) ([]models.Author, error) {
	ret := _m.Called(ctx)

	var r0 []models.Author
	if rf, ok := ret.Get(0).(func(context.Context) []models.Author); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Author)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthorUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorUseCase creates a new instance of AuthorUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorUseCase(t mockConstructorTestingTNewAuthorUseCase) *AuthorUseCase {
	mock := &AuthorUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
